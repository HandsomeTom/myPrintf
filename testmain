/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   testmain.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tmaarela <tmaarela@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/11/29 14:46:02 by tmaarela          #+#    #+#             */
/*   Updated: 2020/01/13 18:26:06 by tmaarela         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "ft_printf.h"
#include <stdio.h>
#include <limits.h>

int		main(int argc, char **argv)
{
	char	teststr[64] = "SAMPLE STRING STRONG!";
	char	ch = 'A';
	char	*tests;
	int		a;
	int		b;
	char c;
	double	fn = 0.00005;
	double	fn2 = 13746.1334;
	int		num = 666;

	int count = 0;
	while (1)
	{
		ft_printf("%#X\n", 1000);
		printf("%#X\n", 1000);
		//ft_printf(COLOR_GREEN "COUNT: " COLOR_MAGENTA " >%12d<" COLOR_RESET "\n", count);
		count++;
	}

	// ft_printf("My double: %.18f\n", 1122343.30456);
	// printf("Rl double: %.18f\n", 1122343.30456);

	// ft_printf("My double: %.5f\n", -1122343.000030456);
	// printf("Rl double: %.5f\n", -1122343.000030456);

	// ft_printf("My double: %f\n", 123.000);
	// printf("Rl double: %f\n", 123.000);

	// ft_printf("My double: %f\n", -7.345);
	// printf("Rl double: %f\n", -7.345);

	// ft_printf("My double (0.0): %.f\n", 0.0);
	// printf("Rl double (0.0): %.f\n", 0.0);

	// ft_printf("My double (hash 0): %#.f\n", 123.000);
	// printf("Rl double (hash 0): %#.f\n", 123.000);

	// ft_printf("My double: %f\n", 0.0002);
	// printf("Rl double: %f\n", 0.0002);

	// ft_printf("My double (width, prec): %12.5f\n", 123.456);
	// printf("Rl double (width, prec): %12.5f\n", 123.456);

	// ft_printf("My double (17 prec): %.16f\n", 123.456);
	// printf("Rl double (17 prec): %.16f\n", 123.456);

	// ft_printf("My double (17 prec): %.16f\n", 123.455);
	// printf("Rl double (17 prec): %.16f\n", 123.455);

	// ft_printf("My double (17 prec): %.16f\n", 123.422);
	// printf("Rl double (17 prec): %.16f\n", 123.422);

	// ft_printf("My double (0.999): %.f\n", 1.999);
	// printf("Rl double (0.999): %.f\n", 1.999);

	// ft_printf("My double (0.strange): %.3f\n", 0.512342342);
	// printf("Rl double (0.strange): %.3f\n", 0.51234234234);

	// ft_printf("My double (0.999): %.2f\n", 0.999);
	// printf("Rl double (0.999): %.2f\n", 0.999);

	// ft_printf("My double (0.999): %.4f\n", 0.999);
	// printf("Rl double (0.999): %.4f\n", 0.999);

	// ft_printf("My double (0.999, prec 0): %.3f\n", 0.9999);
	// printf("Rl double (0.999, prec 0): %.3f\n", 0.9999);

	// ft_printf("My double: %.11Lf\n", 12345678912345678.12069);
	// printf("Rl double: %.11Lf\n", 12345678912345678.12069);

	// ft_printf("%Z\n");
	// printf("%Z\n");

	// ft_printf("%7\n");
	// printf("%7\n");

	// ft_printf("%.1f\n", 27.3);
	// printf("%.1f\n", 27.3);

	// ft_printf("%-5c\n", '\0');
	// printf("%-5c\n", '\0');

	// ft_printf("% lli\n", 9223372036854775807ll);
	// printf("% lli\n", 9223372036854775807ll);

	// ft_printf("% lli\n", -9223372036854775807ll);
	// printf("% lli\n", -9223372036854775807ll);

	// ft_printf("% i\n", 922);
	// printf("% i\n", 922);

	// ft_printf("%#o\n", 0);
	// printf("%#o\n", 0);

	// ft_printf("%#.4o\n", 1);
	// printf("%#.4o\n", 1);

	// ft_printf("%#.3o\n", 0);
	// printf("%#.3o\n", 0);

	// ft_printf("% li\n", 9223372036854775807l);
	// printf("% li\n", 9223372036854775807l);

	// ft_printf("% li\n", -9223372036854775806l);
	// printf("% li\n", -9223372036854775806l);

	// ft_printf("%+5.0i\n", 0);
	// printf("%+5.0i\n", 0);

	// ft_printf("%+7i\n", 0);
	// printf("%+7i\n", 0);

	// ft_printf("%.15lf\n", -0.0);
	// printf("%.15lf\n", -0.0);

	// ft_printf("%+5.0i\n", 0);
	// printf("%+5.0i\n", 0);

	// ft_printf("%.37li\n", -22337203685477l);
	// printf("%.37li\n", -22337203685477l);

	// ft_printf("%.7d\n", -356);
	// printf("%.7d\n", -356);

	// ft_printf("%25.3li\n", -22337203685477l);
	// printf("%25.3li\n", -22337203685477l);

	// ft_printf("%.7d\n", -356);
	// printf("%.7d\n", -356);

	// ft_printf("%.37li\n", 22337203685477l);
	// printf("%.37li\n", 22337203685477l);

	// ft_printf("%.7d\n", 356);
	// printf("%.7d\n", 356);

	// ft_printf("%c\n%d\n%c\n", 'H', 69, 'i');
	// printf("%c\n%d\n%c\n", 'H', 69, 'i');

	// ft_printf("%+-8.3i\n", 8375);
	// printf("%+-8.3i\n", 8375);

	// ft_printf("%c%d%c%c%c\n", 'H', 'e', 'l', 'l', 'o');
	// printf("%c%d%c%c%c\n", 'H', 'e', 'l', 'l', 'o');

	// ft_printf("%c%c%c%c%c\n", 0, 74, 75, 66, 0);
	// printf("%c%c%c%c%c\n", 0, 74, 75, 66, 0);

	// ft_printf("%3c\n", 0);
	// printf("%3c\n", 0);

	// ft_printf("%7.5c\n", 'c');
	// printf("%7.5c\n", 'c');

	// ft_printf("%#6o\n", 2500);
	// printf("%#6o\n", 2500);

	// ft_printf("%#.o, %#.0o\n", 0, 0);
	// printf("%#.o, %#.0o\n", 0, 0);

	// ft_printf("%#o\n", 0);
	// printf("%#o\n", 0);

	// ft_printf("%#o\n", 3);
	// printf("%#o\n", 3);

	// ft_printf("%#.3o\n", 1);
	// printf("%#.3o\n", 1);

	// ft_printf("%#.o\n", 41);
	// printf("%#.o\n", 41);

	// ft_printf("%#.7o\n", 41);
	// printf("%#.7o\n", 41);

	// ft_printf("%o\n", 0);
	// printf("%o\n", 0);

	// ft_printf("%.3o\n", 1);
	// printf("%.3o\n", 1);

	// ft_printf("%2.9p\n", 1234);
	// printf("%2.9p\n", 1234);

	// ft_printf("%.5p\n", 0);
	// printf("%.5p\n", 0);

	// ft_printf("%.5p\n", tests);
	// printf("%.5p\n", tests);

	// ft_printf("%.p, %.0p\n", 0, 0);
	// printf("%.p, %.0p\n", 0, 0);

	// ft_printf("%o\n", LONG_MAX);
	// printf("%o\n", LONG_MAX);

	// ft_printf("{%f}{%lf}{%Lf}\n", 1444565444646.6465424242242, 1444565444646.6465424242242, 1444565444646.6465424242242l);
	// printf("{%f}{%lf}{%Lf}\n", 1444565444646.6465424242242, 1444565444646.6465424242242, 1444565444646.6465424242242l);
	// ft_printf("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c \
	// %c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\
	// %c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\n",
	// ' ', '!', '"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-',
	// '.', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';',
	// '<', '=', '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',
	// 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',
	// 'X', 'Y', 'Z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e',
	// 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',
	// 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '|', '}');


	// printf("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c \
	// %c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\
	// %c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\n",
	// ' ', '!', '"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-',
	// '.', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';',
	// '<', '=', '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',
	// 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',
	// 'X', 'Y', 'Z', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e',
	// 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',
	// 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '|', '}');


	// ft_printf("% d\n", -9999);
	// printf("% d\n", -9999);

	// ft_printf(".%%.%%.%%.%%.%%.%%.%%.%%.\n");
	// printf(".%%.%%.%%.%%.%%.%%.%%.%%.\n");

	// ft_printf("{% 03d}\n", 0);
	// printf("{% 03d}\n", 0);

	// ft_printf("%15.4s\n", "42 is the answer");
	// printf("%15.4s\n", "42 is the answer");

	// ft_printf("Pointer1: %p\n", 0);
	// printf("Pointer2: %p\n", 0);

	// ft_printf("@moulitest: %.10d\n", -42);
	// printf("@moulitest: %.10d\n", -42);

	// ft_printf("%05.4d\n", -18);
	// printf("%05.4d\n", -18);

	// ft_printf("%3.2d\n", 0);
	// printf("%3.2d\n", 0);

	// ft_printf("MyNum: %08.6d\n", -225);
	// printf("MnNum: %08.6d\n", -225);

	// ft_printf("MyNum: %d\n", -225);
	// printf("MnNum: %d\n", -225);

	// ft_putendl("");

	// ft_printf("%+d\n", 42);
	// printf("%+d\n", 42);

	// ft_putendl("");

	// ft_printf("% +d\n", 42);
	// printf("% +d\n", 42);

	// ft_printf("My hex: %0#8.x\n", 19);
	// printf("Og hex: %0#8.x\n", 19);

	// ft_printf("My hex: %08.5x\n", 19);
	// printf("Og hex: %08.5x\n", 19);

	// ft_printf("My hex: %#.5x\n", 19);
	// printf("Og hex: %#.5x\n", 19);

	// ft_printf("My hex: %#1x\n", 42);
	// printf("Og hex: %#1x\n", 42);

	// ft_printf("My octal: %#.o\n", 0);
	// printf("Og octal: %#.o\n", 0);

	// ft_printf("My %010.5d\n", 42);
	// printf("Nm %010.5d\n", 42);

	// ft_printf("%#8x\n", 42);
	// printf("%#8x\n", 42);

	// ft_printf("%c\n%c\n", 'T', 42);
	// printf("%%\n");

	// ft_printf("%.0%\n");
	// printf("%.0%\n");

	// a = ft_printf("%x\n", -42, 42);
	// b = printf("%x\n", -42);

	// ft_printf("%#X\n", 0);
	// printf("%#X\n", 0);

	// ft_printf("%.2x\n", 5427);
	// printf("%.2x\n", 5427);

	// ft_printf("%x\n", 4294967296);
	// printf("%x\n", 4294967296);

	// ft_printf("Hello%% World!\n");
	// ft_printf("Number: %d and another: %d\n and string: %s\n", 12345, 666, teststr);
	// printf("Number: %d and another: %d\n and string: %s\n", 12345, 666, teststr);

	// ft_printf("Character: %c\n", ch);
	// printf("Character: %c\n", ch);

	// a = ft_printf("Pointer address: %p\n", tests);
	// b = printf("Pointer address: %p\n", tests);

	// ft_printf("With num 31,\n%o octal\n%x hex\n%X HEX\n", 31, 31, 31);
	// printf("With num 31,\n%o octal\n%x hex\n%X HEX\n", 31, 31, 31);

	// ft_printf("int %9.6d\n", 567);
	// printf("int %9.6d\n", 567);

	// ft_printf("Flagtesting %09d\n", 12);
	// printf("Flagtesting %09d\n", 12);

	// a = ft_printf("Precision testing num 123456: %-+24.11d\n", 12347656);
	// b = printf("Noecision testing num 123456: %-+24.11d\n", 12347656);

	// ft_printf("RETURN FT_PRINTF: %d\n", a);
	// printf("RETURN PRINTF: %d\n", b);

	// ft_printf(COLOR_RED "Trying out %20.15d\n" COLOR_RESET, 88);
	// printf(COLOR_GREEN "Trying out %20.15d\n" COLOR_RESET, 88);

	// ft_printf("1Trying out %+10d\n", 87654);
	// printf("2Trying out %+10d\n\n", 87654);

	// ft_printf("Trying out %-10.8d\n", 77);
	// printf("Trying out %-10.8d\n\n", 77);

	// ft_printf("Float1:   %#.f\n", fn);
	// printf("Float2:   %#.f\n", fn);

	// ft_printf("Float1:   %.17f\n", fn);
	// printf("Float2:   %.17f\n", fn);

	// ft_printf("Float1:   %.f\n", fn);
	// printf("Float2:   %.f\n", fn);

	// ft_printf("Float1:   %f\n", fn);
	// printf("Float2:   %f\n", fn);

	// ft_printf("Float1:   %#.f\n", fn);
	// printf("Float2:   %#.f\n", fn);

	// ft_printf("Float1:   %17f\n", fn);
	// printf("Float2:   %17f\n", fn);

	// ft_printf("Float1:   %#.f\n", fn2);
	// printf("Float2:   %#.f\n", fn2);

	// ft_printf("Float1:   %.15f\n", fn2);
	// printf("Float2:   %.15f\n", fn2);

	// ft_printf("Float1:   %.15f\n", 13746.1932);
	// printf("Float2:   %.15f\n", 13746.1932);

	// ft_printf("Float1:   %f\n", fn2);
	// printf("Float2:   %f\n", fn2);

	// ft_printf("Float1:   %#.f\n", fn2);
	// printf("Float2:   %#.f\n", fn2);

	// ft_printf("Float1:   %17f\n", fn2);
	// printf("Float2:   %17f\n", fn2);

	// ft_printf("Float1:   %.44f\n", 8453455678252353453453453453453433453765745.345123456345);
	// printf("Float2:   %.44f\n", 1111111111111111111111111111111111111111111.111111111111111);

	// ft_printf("Octal flag:   %#.4o\n", num);
	// printf("Octal flag:   %#.4o\n", num);

	// ft_printf("hex flag:   %#.4x\n", num);
	// printf("hex flag:   %#.4x\n", num);

	// ft_printf("HEX flag:   %-20X\n", num);
	// printf("HEX flag:   %-20X\n", num);

	// ft_printf("1String prec:   %112s\n", "My dear, I regret nothing. Except dying.");
	// printf("2String prec:   %112s\n", "My dear, I regret nothing. Except dying.");

	// ft_printf("3String prec:   %-+12.8s\n", "My dear, I regret nothing. Except dying.");
	// printf("4String prec:   %-+12.8s\n", "My dear, I regret nothing. Except dying.");

	// ft_printf("1Trying out %hhd\n", 356);
	// printf("2Trying out %hhd\n", 356);

	// ft_printf("1Trying out %hho\n", 356);
	// printf("2Trying out %hho\n", 356);

	/*printf("char:%++-50c, %  #-3Ac, %---+54c: str:%+-10.15s, %----+++++-+s: x: % #0-10.11x, %  ++-15.5x: \n
	X: % #0-10.11X, %15.5X: u: %+ - 10.10u, %        -u: d: %++10lld %-10.10hd", '\0', '\200', 'a', "a", 
	"Hello World", 54, 3, 666, 999, -999, 999, 9999999999, 300);*/

	//ft_printf("char:%++-50c, %#-3Ac, %---+54c: str:%+-10.15s, %----+++++-+s: x: % #0-10.11x, %  ++-15.5x: \nX: % #0-10.11X, %  ++-15.5X: u: %+ - 10.10u, %        -u: d: %++10lld %-10.10hd", '\0', '\200', 'a', "a", "Hello World", 54, 3, 666, 999, -999, 999, 9999999999, 300);
	// double i = 9.999999;
	// 	printf("\n");
	// while (i > 9.99999)
	// {
	// 	printf("I == %.7f\n", i);
	// 	ft_printf("MINE: Pros:%%, Point:%p, Char:%c, Str:%s, I:%i, IN:%i, D:%d, DN:%d, U:%u, UN:%u, x:%x, XN:%X, O:%o NO:%o, f:%f, FN:%f.\n",
	// 	&i, '%', "You", 3, -3, 60, -60, 666, -666, 999, -999, 113, -113, i * 3, i);
	// 	printf("REAL: Pros:%%, Point:%p, Char:%c, Str:%s, I:%i, IN:%i, D:%d, DN:%d, U:%u, UN:%u, x:%x, XN:%X, O:%o NO:%o, f:%f, FN:%f.\n",
	// 	&i, '%', "You", 3, -3, 60, -60, 666, -666, 999, -999, 113, -113, i * 3, i);
	// 	i -= 0.0000001;
	// 	printf("\n");
	// }
	return (0);
}
